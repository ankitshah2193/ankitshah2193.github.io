{"version":3,"sources":["components/scoreentry/TeamScore.jsx","containers/TeamScoreContainer.js","components/scoreboard/StatsTable.jsx","containers/BattingTableContainer.js","components/scoreboard/Scoreboard.js","components/scoreentry/CurrentOverDetails.jsx","containers/CurrentOverDetails.js","components/scoreentry/Score.jsx","actions/actionCreator.js","actions/actions.js","middleware/helper.js","containers/ScoreContainer.js","components/scoreentry/CurrentStrikers.jsx","containers/CurrentStrikers.js","components/scoreentry/ScoreInputPage.js","components/router.js","App.js","serviceWorker.js","reducers/game.js","reducers/team.js","reducers/rootReducer.js","index.js"],"names":["TeamScore","props","react_default","a","createElement","className","currentBattingTeam","currentBattingTeamScore","currentTeamWickets","currentTeamOver","totalOvers","previousBattingTeam","previousBattingTeamScore","teamWickets","previousTeamOvers","getPreviousTeamScoreTemplate","getCurrentOver","balls","Math","floor","connect","state","game","team","noOfBalls","totalScore","wickets","noOfOvers","StatsTable","this","stats","map","value","index","rowDetails","statValue","statIndex","key","headers","tableName","getTableHeaders","getTableStats","React","Component","getPlayerBattingStats","currentPlayerList","players","battingIndex","overs","batsmenIndex","over","i","ball","j","hasOwnProperty","batsman","runs","fours","sixes","createBattingStatsIndex","Object","keys","playerName","undefined","toFixed","Scoreboard","Link","to","TeamScoreContainer","BattingTableContainer","CurrentOverDetails","currentOverDetails","currentBowler","length","info","isExtra","isOut","extraType","join","getLastOver","Score","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","extras","getRunDataTemplate","run","toString","onClick","handleRunChange","getExtrasDataTemplate","extra","handleExtraChange","event","target","innerText","setState","handleOutChange","handleNextBallEvent","_this$state","recordRuns","Fragment","actionCreator","type","_len","arguments","argNames","Array","_key","_len2","args","_key2","action","forEach","arg","overComplete","updateTeamScore","updateNoOfBalls","updateOverDetails","changeStriker","inningsOver","declareWinner","isValidDelivery","recordRunThunk","dispatch","getState","updatedState","currentTeam","currentBattingTeamName","previousBattingTeamName","currentBatsmen","filter","isStriker","name","bowler","extraRuns","parseInt","currentOver","noOfValidBalls","count","getValidNoOfBalls","CurrentStrikers","strikers","striker","classValue","ScoreInputPage","containers_CurrentOverDetails","containers_CurrentStrikers","ScoreContainer","CricketRouter","BrowserRouter","Route","path","exact","component","App","router_CricketRouter","Boolean","window","location","hostname","match","initialState","currentBowlingTeam","objectSpread","alert","winningTeam","Team1","Player1","isAvaialbleForBatting","isAvaialbleForBowling","Player2","Player3","Player4","Player5","Team2","teamName","totalRuns","push","deliveryData","rootReducer","combineReducers","store","createStore","compose","applyMiddleware","thunk","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","ReactDOM","render","es","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.73355e8f.chunk.js","sourcesContent":["import React from 'react'\nimport '../../styles/team-score.css'\n\nfunction getPreviousTeamScoreTemplate(props) {\n    if (props.previousBattingTeam) {\n        return <span> {props.previousBattingTeam} scored {props.previousBattingTeamScore}/{props.teamWickets} in {props.previousTeamOvers} overs </span>;\n    }\n    return <span></span>;\n}\n\nconst TeamScore = (props) => {\n    return (\n        <div>\n            <div className=\"current-team-summary\">\n                <span> {props.currentBattingTeam} </span>\n                <span>{props.currentBattingTeamScore}/{props.currentTeamWickets} in {props.currentTeamOver}/{props.totalOvers}</span>\n            </div>\n\n            <div>\n                <span className=\"previous-team-summary\">{getPreviousTeamScoreTemplate(props)}</span>\n            </div>\n        </div>\n    )\n}\n\nexport default TeamScore;\n\n\n","import TeamScore from '../components/scoreentry/TeamScore';\nimport { connect } from 'react-redux';\n\nfunction getCurrentOver(balls) {\n    return (Math.floor(balls / 6)) + '.' + (balls % 6);\n}\n\nconst mapStateToProps = (state) => ({\n    currentBattingTeam: state.game.currentBattingTeam,\n    previousBattingTeam: state.game.previousBattingTeam,\n    currentTeamOver: getCurrentOver(state.team[state.game.currentBattingTeam].noOfBalls),\n    previousTeamOvers: state.team[state.game.previousBattingTeam] && getCurrentOver(state.team[state.game.previousBattingTeam].noOfBalls),\n    currentBattingTeamScore: state.team[state.game.currentBattingTeam].totalScore,\n    previousBattingTeamScore: state.team[state.game.previousBattingTeam] && state.team[state.game.previousBattingTeam].totalScore,\n    currentTeamWickets: state.team[state.game.currentBattingTeam].wickets,\n    totalOvers: state.game.noOfOvers\n});\n\nexport default connect(mapStateToProps)(TeamScore);","import React from 'react';\n\nexport default class StatsTable extends React.Component {\n    getTableStats() {\n        return this.props.stats.map((value, index)=>{\n            let rowDetails = value.map((statValue, statIndex)=>{\n                return <td key={statIndex}>{statValue}</td>\n            });\n            return <tr key={index}>{rowDetails}</tr>;\n        });\n    }\n\n    getTableHeaders() {\n        return this.props.headers.map((value, index)=>{\n            return <th key={index}>{value}</th>;\n        })\n    }\n\n    render(){\n        return (\n            <div className=\"panel\">\n                <br/>\n                <div className=\"panel-header\">\n                    <h5>{this.props.tableName}</h5>\n                </div>\n                <div className=\"panel-body\">\n                <table className=\"table\">\n                    <thead>\n                        <tr>\n                            {this.getTableHeaders()}\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {this.getTableStats()}\n                    </tbody>\n                </table>\n                </div>\n            </div>\n        )\n    }\n}","import {connect} from 'react-redux';\nimport StatsTable from '../components/scoreboard/StatsTable';\n\nfunction createBattingStatsIndex(overs) {\n    let batsmenIndex = {};\n    overs.map((over, i)=>{\n        return over.map((ball, j)=>{\n            if (!batsmenIndex.hasOwnProperty(ball.batsman))\n                batsmenIndex[ball.batsman] = {\n                    runs: 0,\n                    balls: 0,\n                    fours: 0,\n                    sixes: 0\n                }\n            batsmenIndex[ball.batsman].runs += ball.runs;\n            batsmenIndex[ball.batsman].balls += 1;\n            batsmenIndex[ball.batsman].fours += ball.runs === 4 ? 1 : 0;\n            batsmenIndex[ball.batsman].sixes += ball.runs === 6 ? 1 : 0;\n            return null;\n        })\n    });\n    return batsmenIndex;\n}\n\nfunction getStrikeRate(runs, balls) {\n    if (balls === 0) return 0;\n    return (runs/balls*100).toFixed(2);\n}\n\nfunction getPlayerBattingStats(state) {\n    let currentBattingTeam = state.game.currentBattingTeam;\n    let currentPlayerList = state.team[currentBattingTeam].players;\n    let battingIndex = createBattingStatsIndex(state.team[currentBattingTeam].overs);\n    \n    return Object.keys(currentPlayerList).map((playerName, index)=>{\n        if (battingIndex[playerName] === undefined)\n            return [playerName, 0, 0, 0, 0, 0];\n        return [\n            playerName,\n            battingIndex[playerName].runs,\n            battingIndex[playerName].balls,\n            battingIndex[playerName].fours,\n            battingIndex[playerName].sixes,\n            getStrikeRate(battingIndex[playerName].runs, battingIndex[playerName].balls)\n        ]\n    })\n}\n\nconst mapStateToProps = state => {\n    return {\n        tableName: \"Batting Table\",\n        stats: getPlayerBattingStats(state),\n        headers: ['Batsman', 'Runs', 'Balls', 'Fours', 'Sixes', 'SR']\n    }\n}\n\nexport default connect(mapStateToProps)(StatsTable);","import React from 'react';\nimport {Link} from 'react-router-dom';\nimport TeamScoreContainer from '../../containers/TeamScoreContainer';\nimport BattingTableContainer from '../../containers/BattingTableContainer';\n\nexport default class Scoreboard extends React.Component {\n    render() {\n        return (\n            <div className=\"app-container container\">\n                <Link to=\"/\">ScoreEntry</Link>\n                <TeamScoreContainer/>\n                <BattingTableContainer />\n            </div>\n        )\n    }\n}","import React from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport '../../styles/currentOverDetails.css';\n\nimport PropTypes from 'prop-types';\n\nclass CurrentOverDetails extends React.Component{\n    \n    render(){\n        return (\n            <div className=\"current-over-container\">\n                <div>\n                    This Over: {this.props.currentOverDetails}\n                </div>\n                <div>\n                    Bowler: {this.props.currentBowler}\n                </div>\n            </div>\n        );\n    }\n\n}\n\nCurrentOverDetails.propTypes = {\n    currentBowler : PropTypes.string,\n    currentOverDetails : PropTypes.string\n}\n\nexport default CurrentOverDetails;\n\n","import {connect} from 'react-redux';\nimport CurrentOverDetails from '../components/scoreentry/CurrentOverDetails';\n\nconst mapStateToProp = state =>{\n    function getLastOver() {\n        let overs = state.team[state.game.currentBattingTeam].overs;\n        return overs.length > 0 ? \n                overs[overs.length - 1]\n                .map(ball => {\n                    let info = '';\n                    \n                    if(ball.runs === 0 && (ball.isExtra || ball.isOut)) {\n                       info = '';\n                    } else {\n                        info += ball.runs;\n                    }\n                   \n                    if(ball.isExtra) {\n                        info += ball.extraType;\n                    } \n                    if(ball.isOut) {\n                        info += 'Out';\n                    }   \n                    return info;\n                })\n                .join('  ') : '';\n    }\n    \n    return {\n        currentBowler: state.game.currentBowler,\n        currentOverDetails: getLastOver()\n    }\n}\n\nexport default connect(mapStateToProp)(CurrentOverDetails);\n","import React from 'react';\nimport '../../styles/score.css';\nimport propTypes from 'prop-types';\n\nclass Score extends React.Component {\n    runs = [0, 1, 2, 3, 4, 6];\n    extras = ['W', 'N', 'B', 'Lb'];\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            runs: null,\n            isExtra: false,\n            isOut: false,\n            extraType: null\n        }\n    }\n\n    getRunDataTemplate = () => {\n        return this.runs.map(run => <button \n                                    key={run} \n                                    className={'score-button btn ' + (this.state.runs === run.toString() ? 'btn-primary' : 'btn-light')}\n                                    onClick={this.handleRunChange}\n                                    >{run}</button>)\n    }\n\n    getExtrasDataTemplate = () => {\n        return this.extras.map(extra => <button \n                                        key={extra} \n                                        className={'score-button btn ' + (this.state.extraType === extra.toString() ? 'btn-primary' : 'btn-light')}\n                                        onClick={this.handleExtraChange}\n                                        >{extra}</button>)\n    }\n\n    handleRunChange = (event) => {\n        const run = event.target.innerText;\n        this.setState({\n            runs: this.state.runs === run ? null : run\n        });\n    }\n\n    handleExtraChange = (event) => {\n        const extra = event.target.innerText;\n        this.setState({\n            extraType: this.state.extraType === extra ? null : extra,\n            isExtra: this.state.extraType === extra ? false : true\n        });\n    }\n\n    handleOutChange = () => {\n        this.setState({\n            isOut: !this.state.isOut\n        });\n    }\n    \n    handleNextBallEvent = () => {\n        const {runs, isExtra, isOut, extraType} = this.state;\n\n        this.setState({\n            runs: null,\n            isExtra: false,\n            isOut: false,\n            extraType: null\n        });\n\n        this.props.recordRuns(runs, isExtra, extraType, isOut);\n    }\n\n    render() {\n        return (\n            <React.Fragment>\n                <div className=\"runs-container\">\n                    {this.getRunDataTemplate()}\n                </div>\n\n                 <div className=\"extra-runs-container\">\n                    <span className=\"extra-label\">Extras&nbsp;</span>\n                    {this.getExtrasDataTemplate()}\n                 </div>\n\n                 <div className=\"out-container\">\n                    <button \n                    className={'score-button btn ' + (this.state.isOut ? 'btn-primary' : 'btn-light')}\n                    onClick={this.handleOutChange}\n                    >Out</button>\n                 </div>\n\n                  <div className=\"next-ball-container\">\n                    <button \n                    className={'btn btn-lg ' + (this.state.runs || this.state.isOut || this.state.isExtra ? 'btn-success' : 'btn-secondary disabled')}\n                    onClick={this.handleNextBallEvent}\n                    >Next Ball</button>\n                 </div>\n\n            </React.Fragment>\n        )\n    }\n}\n\nexport default Score;\n\nScore.propTypes = {\n    recordRuns: propTypes.func\n}","export default function actionCreator(type, ...argNames) {\n    return function(...args) {\n      let action = { type };\n      argNames.forEach((arg, index) => {\n        action[argNames[index]] = args[index];\n      });\n      return action;\n    };\n  }","import actionCreator from \"./actionCreator\";\n\nexport const overComplete = actionCreator('OVER_COMPLETE', 'teamName');\n\nexport const updateTeamScore = actionCreator('UPDATE_TEAM_SCORE', 'teamName', 'totalRuns');\n\nexport const updateNoOfBalls = actionCreator('UPDATE_NO_OF_BALLS', 'teamName');\n\nexport const updateOverDetails = actionCreator('UPDATE_OVER_DETAILS', 'teamName', 'deliveryData', 'currentOver');\n\nexport const changeStriker = actionCreator('CHANGE_STRIKER');\n\nexport const inningsOver = actionCreator('INNINGS_OVER');\n\nexport const declareWinner =  actionCreator('DECLARE_WINNER', 'winningTeam');\n","import { overComplete, updateTeamScore, updateNoOfBalls, updateOverDetails, changeStriker, inningsOver, declareWinner } from \"../actions/actions\";\n\nfunction getValidNoOfBalls(over) {\n    let count = 0;\n    over.forEach(ball => {\n        if (isValidDelivery(ball.isExtra, ball.extraType)) {\n            count++;\n        }\n    })\n\n    return count;\n}\n\nfunction isValidDelivery(isExtra, extraType) {\n    return !isExtra || (isExtra && (extraType === 'Lb' || extraType === 'B'));\n}\n\n\nexport function recordRunThunk(runs, isExtra, extraType, isOut) {\n    return function (dispatch, getState) {\n        const updatedState = getState(), \n            currentTeam = updatedState.team[updatedState.game.currentBattingTeam],\n            currentBattingTeamName = updatedState.game.currentBattingTeam,\n            previousBattingTeamName = updatedState.game.previousBattingTeam,\n            batsman = updatedState.game.currentBatsmen.filter(batsman => batsman.isStriker)[0].name,\n            bowler = updatedState.game.currentBowler,\n            extraRuns = isExtra ? 1 : 0,\n            run = runs ? parseInt(runs, 10) : 0;\n\n        let currentOver = currentTeam.overs.length - 1,\n            noOfValidBalls =  currentTeam.overs[currentOver].length > 0 ? getValidNoOfBalls(currentTeam.overs[currentOver]) : 0;\n\n        const totalRuns = run + extraRuns;\n\n        dispatch(updateTeamScore(currentBattingTeamName, totalRuns));\n\n        if (isValidDelivery(isExtra, extraType)) {\n            dispatch(updateNoOfBalls(currentBattingTeamName));\n            noOfValidBalls += 1;\n        }\n\n        const deliveryData = {\n            batsman: batsman,\n            bowler: bowler,\n            isExtra: isExtra,\n            isOut: isOut,\n            extraRuns: extraRuns,\n            runs: run,\n            extraType: extraType\n        };\n\n        dispatch(updateOverDetails(currentBattingTeamName, deliveryData, currentOver));\n\n        if(previousBattingTeamName) {\n            const previousBattingTeam = updatedState.team[previousBattingTeamName];\n            const teamHasWon = previousBattingTeam.totalScore < currentTeam.totalScore;\n            if(teamHasWon) {\n                dispatch(declareWinner(currentBattingTeamName));\n                return;\n            }\n        } \n\n        if(runs % 2 > 0) {\n            dispatch(changeStriker());\n        }\n\n        if (noOfValidBalls === 6) {\n            if(currentTeam.overs.length === updatedState.game.noOfOvers) {\n                dispatch(inningsOver());\n            } else {\n                dispatch(overComplete(currentBattingTeamName));\n                dispatch(changeStriker());\n            }\n        }\n    }\n}\n","import { connect } from 'react-redux';\nimport Score from '../components/scoreentry/Score';\nimport { recordRunThunk } from '../middleware/helper';\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        recordRuns(runs, isExtra, extraType, isOut) {\n            dispatch(recordRunThunk(runs, isExtra, extraType, isOut))\n        }\n    }\n}\n\nexport default connect(null, mapDispatchToProps)(Score);","import React from 'react';\nimport propTypes from 'prop-types';\nimport '../../styles/currentStrikers.css';\n\n\nfunction getStrikers(strikers) {\n    return strikers.map((striker, index) => {\n        const classValue = striker.isStriker ? 'btn btn-info' : 'btn btn-secondary';\n        return <div key={index} className={classValue}>{striker.name}</div>\n    })\n}\n\nfunction CurrentStrikers(props) {\n    return (\n            <div className=\"current-striker-container\">\n                <div>\n                    <span>This Ball</span>\n                </div>\n                <div className=\"current-striker-btn-container\">\n                    {getStrikers(props.strikers)}\n                </div>\n            </div>\n    )\n}\n\nexport default CurrentStrikers;\n\nCurrentStrikers.propTypes = {\n    strikers: propTypes.array\n}","import { connect } from 'react-redux';\nimport CurrentStrikers from '../components/scoreentry/CurrentStrikers';\n\n\nconst mapStateToProps = (state) => ({\n    strikers : state.game.currentBatsmen\n});\n\nexport default connect(mapStateToProps)(CurrentStrikers);","import React from 'react';\nimport TeamScoreContainer from '../../containers/TeamScoreContainer';\nimport CurrentOverDetails from '../../containers/CurrentOverDetails';\nimport { Link } from 'react-router-dom'\nimport ScoreContainer from '../../containers/ScoreContainer';\nimport CurrentStrikers from '../../containers/CurrentStrikers';\nimport '../../styles/scoreInputPage.css';\n\nexport default class ScoreInputPage extends React.Component {\n\n  render() {\n    return (\n      <div className=\"app-container\">\n        <TeamScoreContainer/>\n        <CurrentOverDetails />\n        <CurrentStrikers/>\n        <ScoreContainer />\n        <div className=\"scoreboard-link-container\">\n          <Link to=\"/scoreboard\">Scoreboard</Link>\n        </div>\n      </div>\n    );\n  }\n}","import React from 'react';\nimport Scoreboard from './scoreboard/Scoreboard.js';\nimport {BrowserRouter as Router, Route} from 'react-router-dom';\nimport ScoreInputPage from './scoreentry/ScoreInputPage.js';\n\nexport default class CricketRouter extends React.Component {\n    render() {\n        return (\n            <Router>\n                <div>\n                    <Route path=\"/\" exact component={ScoreInputPage} />\n                    <Route path=\"/scoreboard\" component={Scoreboard} />\n                </div>\n            </Router>\n        )\n    }\n}","import React, { Component } from 'react';\nimport './App.css';\nimport CricketRouter from './components/router';\n\nclass App extends Component {\n\n  render() {\n    return (\n      <CricketRouter />\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","const initialState = {\n    currentBattingTeam: 'Team1',\n    previousBattingTeam: null,\n    currentBowlingTeam: 'Team2',\n    currentBatsmen: [\n        { name: 'Player1', isStriker: true },\n        { name: 'Player2', isStriker: false }\n    ],\n    currentBowler: 'Player1',\n    noOfOvers: 5\n};\n\nconst game = (state = initialState, action) => {\n    switch (action.type) {\n        case 'CHANGE_STRIKER':\n            return {\n                ...state,\n                currentBatsmen: state.currentBatsmen.map(batsman => {\n                    return {\n                        ...batsman,\n                        isStriker: !batsman.isStriker\n                    }\n                })\n            }\n        case 'INNINGS_OVER':\n            alert('First Inning Is Over!!!!!!!!!!!!');\n            return {\n                ...state,\n                currentBattingTeam: 'Team2',\n                previousBattingTeam: 'Team1',\n                currentBowlingTeam: 'Team1'\n            }\n        case 'DECLARE_WINNER':\n            alert('Congratulations, ' + action.winningTeam + \". You are the WINNER.\");\n            return state;\n        default:\n            break;\n    }\n    return state;\n};\n\nexport default game;","const initialState = {\n    Team1: {\n        totalScore: 0,\n        noOfBalls: 0,\n        wickets: 0,\n        players: {\n            Player1: {\n                isAvaialbleForBatting: true,\n                isAvaialbleForBowling: true\n            },\n            Player2: {\n                isAvaialbleForBatting: true,\n                isAvaialbleForBowling: true\n            },\n            Player3: {\n                isAvaialbleForBatting: true,\n                isAvaialbleForBowling: true\n            },\n            Player4: {\n                isAvaialbleForBatting: true,\n                isAvaialbleForBowling: true\n            },\n            Player5: {\n                isAvaialbleForBatting: true,\n                isAvaialbleForBowling: true\n            }\n        },\n        overs: [\n            []\n        ]\n    },\n    Team2: {\n        totalScore: 0,\n        noOfBalls: 0,\n        wickets: 0,\n        players: {\n            Player1: {\n                isAvaialbleForBatting: true,\n                isAvaialbleForBowling: true\n            },\n            Player2: {\n                isAvaialbleForBatting: true,\n                isAvaialbleForBowling: true\n            },\n            Player3: {\n                isAvaialbleForBatting: true,\n                isAvaialbleForBowling: true\n            },\n            Player4: {\n                isAvaialbleForBatting: true,\n                isAvaialbleForBowling: true\n            },\n            Player5: {\n                isAvaialbleForBatting: true,\n                isAvaialbleForBowling: true\n            }\n        },\n        overs: [\n            []\n        ]\n    }\n};\n\n\n\nconst team = (state = initialState, action) => {\n    const updatedState = { ...state };\n\n    switch (action.type) {\n        case 'UPDATE_TEAM_SCORE':\n            updatedState[action.teamName].totalScore += action.totalRuns;\n            return updatedState;\n        case 'UPDATE_NO_OF_BALLS':\n            updatedState[action.teamName].noOfBalls += 1;\n            return updatedState;\n        case 'UPDATE_OVER_DETAILS':\n            updatedState[action.teamName].overs[action.currentOver].push(action.deliveryData);\n            return updatedState;\n        case 'OVER_COMPLETE':\n            updatedState[action.teamName].overs.push([]);\n            return updatedState;\n        default:\n            break;\n    }\n    return updatedState;\n};\n\nexport default team;","import { combineReducers } from 'redux';\nimport game from './game';\nimport team from './team';\n\nconst rootReducer = combineReducers({\n    game,\n    team\n});\n\nexport default rootReducer;","import React from 'react';\nimport ReactDOM from 'react-dom';\n//import './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, compose } from 'redux';\nimport rootReducer from './reducers/rootReducer';\nimport thunk from \"redux-thunk\";\n\n\nconst store = createStore(rootReducer, {},  compose(\n    applyMiddleware(thunk),\n    (window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ && window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__()) || compose\n    ));\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>\n   , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}