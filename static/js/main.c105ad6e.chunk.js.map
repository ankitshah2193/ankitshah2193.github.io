{"version":3,"sources":["components/TeamScore.jsx","containers/TeamScoreContainer.js","App.js","serviceWorker.js","reducers/game.js","reducers/team.js","reducers/rootReducer.js","index.js"],"names":["TeamScore","props","react_default","a","createElement","className","currentBattingTeam","currentBattingTeamScore","teamWickets","currentTeamOver","totalOvers","previousBattingTeam","previousBattingTeamScore","previousTeamOvers","getPreviousTeamScoreTemplate","getCurrentOver","balls","Math","floor","connect","state","game","team","noOfBalls","totalScore","noOfOvers","App","TeamScoreContainer","Component","Boolean","window","location","hostname","match","initialState","currentBowlingTeam","currentBatsmen","name","isStriker","currentBowler","arguments","length","undefined","type","Object","objectSpread","map","batsman","Team1","players","player1","isAvaialbleForBatting","isAvaialbleForBowling","player2","player3","player4","player5","overs","Team2","action","updatedState","currentTeam","teamName","currentOver","currentBall","isExtra","runs","extraRuns","push","bowler","isOut","ballNo","extraType","rootReducer","combineReducers","store","createStore","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","es","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+QAUA,IAeeA,EAfG,SAACC,GACf,OACIC,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,wBACXH,EAAAC,EAAAC,cAAA,gBAAQH,EAAMK,mBAAd,KACAJ,EAAAC,EAAAC,cAAA,YAAOH,EAAMM,wBAAb,IAAuCN,EAAMO,YAA7C,OAA8DP,EAAMQ,gBAApE,IAAsFR,EAAMS,aAGhGR,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,QAAMC,UAAU,yBAhBhC,SAAsCJ,GAClC,OAAIA,EAAMU,oBACCT,EAAAC,EAAAC,cAAA,gBAAQH,EAAMU,oBAAd,WAA2CV,EAAMW,yBAAjD,IAA4EX,EAAMO,YAAlF,OAAmGP,EAAMY,kBAAzG,WAEJX,EAAAC,EAAAC,cAAA,aAY8CU,CAA6Bb,cChBtF,SAASc,EAAeC,GACpB,OAAQC,KAAKC,MAAMF,EAAQ,GAAM,IAAOA,EAAQ,EAGpD,IAWeG,cAXS,SAACC,GAAD,MAAY,CAChCd,mBAAoBc,EAAMC,KAAKf,mBAC/BK,oBAAqBS,EAAMC,KAAKV,oBAChCF,gBAAiBM,EAAeK,EAAME,KAAKF,EAAMC,KAAKf,oBAAoBiB,WAC1EV,kBAAmBO,EAAME,KAAKF,EAAMC,KAAKV,sBAAwBI,EAAeK,EAAME,KAAKF,EAAMC,KAAKV,qBAAqBY,WAC3HhB,wBAAyBa,EAAME,KAAKF,EAAMC,KAAKf,oBAAoBkB,WACnEZ,yBAA0BQ,EAAME,KAAKF,EAAMC,KAAKV,sBAAwBS,EAAME,KAAKF,EAAMC,KAAKV,qBAAqBa,WACnHhB,YAAa,EACbE,WAAYU,EAAMC,KAAKI,YAGZN,CAAyBnB,GCJzB0B,mLARX,OACExB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACbH,EAAAC,EAAAC,cAACuB,EAAD,cAJUC,aCQEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,6EClBAC,EAAe,CACjB5B,mBAAqB,QACrBK,oBAAqB,KACrBwB,mBAAqB,QACrBC,eAAgB,CACZ,CAACC,KAAM,UAAWC,WAAW,GAC7B,CAACD,KAAM,UAAWC,WAAW,IAEjCC,cAAe,UACfd,UAAW,GAmBAJ,EAhBF,WAAkC,IAAjCD,EAAiCoB,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAzBN,EAClB,QAD2CM,UAAAC,OAAA,EAAAD,UAAA,QAAAE,GAC5BC,MACX,IAAK,iBACD,OAAOC,OAAAC,EAAA,EAAAD,CAAA,GACAxB,EADP,CAEIgB,eAAgBhB,EAAMgB,eAAeU,IAAI,SAAAC,GAAO,OAAAH,OAAAC,EAAA,EAAAD,CAAA,GACrCG,EADqC,CAExCT,WAAYS,EAAQT,gBAMxC,OAAOlB,GCzBLc,EAAe,CACjBc,MAAO,CACHxB,WAAY,EACZD,UAAY,EACZ0B,QAAS,CACLC,QAAS,CACLC,uBAAwB,EACxBC,uBAAwB,GAE5BC,QAAS,CACLF,uBAAwB,EACxBC,uBAAwB,GAE5BE,QAAS,CACLH,uBAAwB,EACxBC,uBAAwB,GAE5BG,QAAS,CACLJ,uBAAwB,EACxBC,uBAAwB,GAE5BI,QAAS,CACLL,uBAAwB,EACxBC,uBAAwB,IAGhCK,MAAO,IAGXC,MAAO,CACHlC,WAAY,EACZD,UAAY,EACZ0B,QAAS,CACLC,QAAS,CACLC,uBAAwB,EACxBC,uBAAwB,GAE5BC,QAAS,CACLF,uBAAwB,EACxBC,uBAAwB,GAE5BE,QAAS,CACLH,uBAAwB,EACxBC,uBAAwB,GAE5BG,QAAS,CACLJ,uBAAwB,EACxBC,uBAAwB,GAE5BI,QAAS,CACLL,uBAAwB,EACxBC,uBAAwB,IAGhCK,MAAO,KA+CAnC,EA1CF,WAAkC,IAAjCF,EAAiCoB,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAzBN,EAAcyB,EAAWnB,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EACrCkB,EAAYhB,OAAAC,EAAA,EAAAD,CAAA,GAAOxB,GAEzB,OAAQuC,EAAOhB,MACX,IAAK,YACD,IAAMkB,EAAcD,EAAaD,EAAOG,UACpCC,EAAcF,EAAYJ,MAAMhB,OAAS,EAAIoB,EAAYJ,MAAMhB,OAAS,EAAI,EAChFuB,EAAcH,EAAYJ,MAAMM,IAAgBF,EAAYJ,MAAMM,GAAatB,OAAS,EACpEkB,EAAOM,QAAUJ,EAAYJ,MAAMM,GAAatB,OAASoB,EAAYJ,MAAMM,GAAatB,OAAS,EAAK,EA2B1H,OA1BAoB,EAAYrC,YAAcmC,EAAOO,KAAOP,EAAOQ,UAE5CH,EAAc,IACbA,EAAc,EACdD,GAAe,GAGfF,EAAYJ,MAAMM,KAClBF,EAAYJ,MAAMM,GAAe,IAGrCF,EAAYJ,MAAMM,GAAaK,KAAK,CAChCrB,QAASY,EAAOZ,QAChBsB,OAAQV,EAAOU,OACfJ,QAASN,EAAOM,QAChBK,MAAOX,EAAOW,MACdH,UAAWR,EAAOQ,UAClBD,KAAMP,EAAOO,KACbK,OAAQP,EACRQ,UAAWb,EAAOa,YAGlBb,EAAOM,UACPJ,EAAYtC,WAAa,GAGtBqC,EAIf,OAAOA,GCzFIa,EALKC,YAAgB,CAChCrD,OACAC,SCKEqD,EAAQC,YAAYH,EAAa,GAAK3C,OAAO+C,8BAAgC/C,OAAO+C,gCAE1FC,IAASC,OACL7E,EAAAC,EAAAC,cAAC4E,EAAA,EAAD,CAAUL,MAAOA,GACbzE,EAAAC,EAAAC,cAAC6E,EAAD,OAEHC,SAASC,eAAe,SJgHvB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.c105ad6e.chunk.js","sourcesContent":["import React from 'react'\nimport '../styles/team-score.css'\n\nfunction getPreviousTeamScoreTemplate(props) {\n    if (props.previousBattingTeam) {\n        return <span> {props.previousBattingTeam} scored {props.previousBattingTeamScore}/{props.teamWickets} in {props.previousTeamOvers} overs </span>;\n    }\n    return <span></span>;\n}\n\nconst TeamScore = (props) => {\n    return (\n        <div>\n            <div className=\"current-team-summary\">\n                <span> {props.currentBattingTeam} </span>\n                <span>{props.currentBattingTeamScore}/{props.teamWickets} in {props.currentTeamOver}/{props.totalOvers}</span>\n            </div>\n\n            <div>\n                <span className=\"previous-team-summary\">{getPreviousTeamScoreTemplate(props)}</span>\n            </div>\n        </div>\n    )\n}\n\nexport default TeamScore;\n\n\n","import TeamScore from '../components/TeamScore';\nimport { connect } from 'react-redux';\n\nfunction getCurrentOver(balls) {\n    return (Math.floor(balls / 6)) + '.' + (balls % 6);\n}\n\nconst mapStateToProps = (state) => ({\n    currentBattingTeam: state.game.currentBattingTeam,\n    previousBattingTeam: state.game.previousBattingTeam,\n    currentTeamOver: getCurrentOver(state.team[state.game.currentBattingTeam].noOfBalls),\n    previousTeamOvers: state.team[state.game.previousBattingTeam] && getCurrentOver(state.team[state.game.previousBattingTeam].noOfBalls),\n    currentBattingTeamScore: state.team[state.game.currentBattingTeam].totalScore,\n    previousBattingTeamScore: state.team[state.game.previousBattingTeam] && state.team[state.game.previousBattingTeam].totalScore,\n    teamWickets: 0,\n    totalOvers: state.game.noOfOvers\n});\n\nexport default connect(mapStateToProps)(TeamScore);","import React, { Component } from 'react';\nimport './App.css';\nimport TeamScoreContainer from './containers/TeamScoreContainer';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"app-container\">\n        <TeamScoreContainer/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","const initialState = {\n    currentBattingTeam : 'Team1',\n    previousBattingTeam: null,\n    currentBowlingTeam : 'Team2',\n    currentBatsmen: [\n        {name: 'Player1', isStriker: true},\n        {name: 'Player2', isStriker: false}\n    ],\n    currentBowler: 'Player3',\n    noOfOvers: 5\n};\n\nconst game = (state = initialState, action) => {\n    switch (action.type) {\n        case 'CHANGE_STRIKER':\n            return {\n                ...state, \n                currentBatsmen: state.currentBatsmen.map(batsman => ({\n                        ...batsman,\n                        isStriker: !batsman.isStriker\n                    }))\n            };\n        default:\n            break;\n    }\n    return state;\n};\n\nexport default game;","const initialState = {\n    Team1: {\n        totalScore: 0,\n        noOfBalls : 0,\n        players: {\n            player1: {\n                isAvaialbleForBatting : true,\n                isAvaialbleForBowling : true\n            },\n            player2: {\n                isAvaialbleForBatting : true,\n                isAvaialbleForBowling : true\n            },\n            player3: {\n                isAvaialbleForBatting : true,\n                isAvaialbleForBowling : true\n            },\n            player4: {\n                isAvaialbleForBatting : true,\n                isAvaialbleForBowling : true\n            },\n            player5: {\n                isAvaialbleForBatting : true,\n                isAvaialbleForBowling : true\n            }\n        },\n        overs: [\n        ]\n    },\n    Team2: {\n        totalScore: 0,\n        noOfBalls : 0,\n        players: {\n            player1: {\n                isAvaialbleForBatting : true,\n                isAvaialbleForBowling : true\n            },\n            player2: {\n                isAvaialbleForBatting : true,\n                isAvaialbleForBowling : true\n            },\n            player3: {\n                isAvaialbleForBatting : true,\n                isAvaialbleForBowling : true\n            },\n            player4: {\n                isAvaialbleForBatting : true,\n                isAvaialbleForBowling : true\n            },\n            player5: {\n                isAvaialbleForBatting : true,\n                isAvaialbleForBowling : true\n            }\n        },\n        overs: [\n        ]\n    }\n};\n\nconst team = (state = initialState, action) => {\n    const updatedState = {...state};\n\n    switch (action.type) {\n        case 'NEXT_BALL':\n            const currentTeam = updatedState[action.teamName];\n            let currentOver = currentTeam.overs.length > 0 ? currentTeam.overs.length - 1 : 0,\n            currentBall = currentTeam.overs[currentOver] && currentTeam.overs[currentOver].length > 0 ? \n                                action.isExtra ? currentTeam.overs[currentOver].length : currentTeam.overs[currentOver].length + 1  : 1;\n            currentTeam.totalScore += action.runs + action.extraRuns;\n\n            if(currentBall > 6) {\n                currentBall = 1;\n                currentOver += 1;\n            }\n\n            if(!currentTeam.overs[currentOver]) {\n                currentTeam.overs[currentOver] = [];\n            }\n\n            currentTeam.overs[currentOver].push({\n                batsman: action.batsman,\n                bowler: action.bowler,\n                isExtra: action.isExtra,\n                isOut: action.isOut,\n                extraRuns: action.extraRuns,\n                runs: action.runs,\n                ballNo: currentBall,\n                extraType: action.extraType\n            });\n\n            if(!action.isExtra) {\n                currentTeam.noOfBalls += 1;\n            }\n\n            return updatedState;\n        default:\n            break;\n    }\n    return updatedState;\n};\n\nexport default team;","import { combineReducers } from 'redux';\nimport game from './game';\nimport team from './team';\n\nconst rootReducer = combineReducers({\n    game,\n    team\n});\n\nexport default rootReducer;","import React from 'react';\nimport ReactDOM from 'react-dom';\n//import './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\nimport { createStore } from 'redux';\nimport rootReducer from './reducers/rootReducer';\n\n\nconst store = createStore(rootReducer, {},  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__());\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>\n   , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}